# -*- coding: utf-8 -*-
"""Jugproblem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uuGZVnjIb3b3PY4baQpTr6Nt7f6sZ_OB
"""

class state:
  def __init__(self,j1,j2,parent):
      self.j1=j1
      self.j2=j2
      self.parent=None
  def emptyj1(self):
    self.j1=0 

  def emptyj2(self):
    self.j2=0

  def fillj1(self):
    self.j1=3

  def fillj2(self):
    self.j2=4

  def transferj1toj2(self):
    if self.j1==0:
      pass
    else:
      self.j2=self.j1+self.j2
      self.j1=0   
      if self.j2>4:
        extra=self.j2-4
        self.j1=extra
        self.j2=4

  def transferj2toj1(self):
    if self.j2==0:
      pass
    else:
      self.j1=self.j1+self.j2
      self.j2=0   
      if self.j1>3:
        self.j2=self.j1-3
        self.j1=3

  def __eq__(self,other):
    if other==None:
      return False
    if other.j1==self.j1 and other.j2==self.j2:
      return True
    else:
      return False
        
  def __hash__(self):
    return self.j1+self.j2
           

  def __str__(self):
    return f'({self.j1},{self.j2})'

def goaltest(node):
  if node.j1==2 or node.j2==2:
    return True
  else:
    return False

setA=set()
setA.add(state(2,2,None))
setA.add(state(2,2,None))

for x in setA:
  print(x)

import copy

def bfs():
  initial=state(0,0,None)
  if goaltest(initial)==True:
    return initial
  frontier=[]
  frontier.append(initial)
  explored=set()
  while True:
    if len(frontier)==0:
      return state(-1,-1,None)
    node = frontier.pop(0)
    explored.add(node)

    child1=copy.deepcopy(node)
    child1.emptyj1()

    child2=copy.deepcopy(node)
    child2.emptyj2()

    child3=copy.deepcopy(node)
    child3.fillj1()

    child4=copy.deepcopy(node)
    child4.fillj2()

    child5=copy.deepcopy(node)
    child5.transferj1toj2()

    child6=copy.deepcopy(node)
    child6.transferj2toj1()

    childlist=[child1,child2,child3,child4,child5,child6]

    for child in childlist:
      if (child not in frontier) and (child not in explored):
        child.parent=node
        if goaltest(child)==True:
          return child
        frontier.append(child)

        
x=bfs()
print(x)

def printpath(x):
  sequence=[]
  while True:
    if x.parent==None:
      sequence.append(x)
      break
    else:
      sequence.append(x)
      x=x.parent
  return sequence

sequence=printpath(x)
sequence.reverse()
for node in sequence:
  print(node)